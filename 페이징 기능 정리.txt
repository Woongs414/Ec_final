1. 페이징 처리에 대한 로직

-> playList.jsp 시작
-/user/board 맵핑명 실행

->BoardController 로 이동
- 위치 55번째 라인 메소드 실행

->int boardCount 선언
-위치 : 57번째 라인
-사용 이유 : 게시물에 역순으로 번호를 표시하기 위해 board전체 게시물의 숫자를 count 해옴
-경로 : boardService.allListCount() -> boardDAO.allBoardPaging()-> mapper.board.selectAllBoardCount sql문작동

->int dispalyNum 선언
-위치 : 58번째 라인
-사용 이유 : 페이징 넘버를 몇번까지 보이게 할것인지를 위해 사용 ex) 10이면 1~10번까지 페이징 넘버가 보임 

-> int page 값 선언
- 위치 : 59번째 라인~64번째 라인까지
- 사용 이유 : 페이징을 위하여 보드 전체 게시물을 쪼개서 가져오고 현재 view의 페이지 넘버를 알기 위해 사용
- 기타 : -첫 화면에서 파라미터로 값을 보내지 않기 때문에 if/else 구문을 통해 1로 초기화 
	- 페이지 버튼을 누를때 그 페이지넘버을 받아와 초기화

-> int startPage 선언
- 위치 : 67번째 라인
- 사용이유 :  페이지의 첫번째 페이지 넘버를 몇번으로 할것인가를 정하기 위하여 
ex)첫페이지에서는 1번부터 시작, next로 넘어간뒤 11번부터 시작

-> int endPage 선언
-위치 : 65번째 라인
-사용이유 : 페이징 넘버의 마지막을 몇번째로 할것인가를 정하기 위하여
ex)첫번째 페이지에서 10번으로 종료, next로 넘어간뒤 20번으로 종료

->int tempEndPage 선언
-위치 : 66번째 라인, 68~70번째 라인
-사용 이유 : 총글의 갯수가 100개 일때 20개씩 글을 한페이지에 보여준다고 하면 실제로는 endPage의 숫자가 5가 되어야 하지만 
현재 공식으로는 20이 되기 때문에 tempEndPage를 따로 선언해서 endPage의 숫자가 tempEndPage보다 크다면 tempEndPage를
endPage에 넣어 정확한 endPage를 가지게 한다

->boolean prev 선언
-위치 : 72번째 라인
-사용 이유 : start페이지가 1일경우 작동이 되지 않게 하기 위해

->boolean next 선언
-위치 : 73번째 라인
-사용 이유 : endPage의 숫자와 dispalyNum을 곱하게 총 게시글의 수보다 큰지 를 확인하여 마지막 페이지를 넘어 next가 작동하지 않도록 하기 위하여

->List boardsList 선언
-위치 : 83번째 라인
-사용 : int page를 보내고 메소드를 실행하여 각페이지에 보여줄 게시글들을 List형식으로 받아 오기 위해
-경로 : boardService.listBoards(page) -> boardDAO.selectAllBoardsList(page) -> mapper.board.selectAllBoardsList sql문 작동
※ DAOclass에서 sql문에서 Limit에서 활용하기 위하여 (page-1)*10으로 0,10,20,30 이런식으로 int page를 재선언

->playList.jsp 에 prev 버튼 기능
-위치 : 153번째 라인 ~169번째 라인
- 사용 : controller에서 받은 prev가 false(startPage=1일경우) 버튼이 작동 안되게 하고 true(startPage!=1일경우) 첫번째 페이지쪽으로 이동 가능하게 이동

->playList.jsp 에 page 넘버 버튼 기능
-위치 : 170번째 라인~ 174번째 라인
-사용: forEach 구문으로 startPage~endPage까지 정렬

->playList.jsp 에 next 버튼 기능
-위치 : 153번째 라인 ~169번째 라인
- 사용 : controller에서 받은 next가 false일경우 버튼이 작동 안되게 하고 true 다음 페이지쪽으로 이동 가능하게 이동

